name: DSO Pipeline

on: [push, pull_request]

jobs:
  sast:
    name: Semgrep - Static Code Analysis
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
      - name: Run semgrep and save report
        run: |
          pip install semgrep
          semgrep --config p/owasp-top-ten --json > semgrep.json
          
      - name: Upload Semgrep report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep.json
      - name: Convert Semgrep to Prom metrics
        run: |
          pip install prometheus_client
          python scripts/semgrep_to_prom.py
      - name: Push metrics to Prom
        run: echo "Pushed via Python script"
  secrets:
    name: Gitleaks - Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
      - name: Upload Gitleaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks_results
          path: gitleaks_results.json
  containers:
    name: Trivy - Container Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build image
        run: docker build -t dso-vulnhunter:latest .
      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: dso-vulnhunter:latest
          format: table
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.txt
  iac:
    name: Checkov - IAC Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: bridgecrewio/checkov-action@master
      - name: Upload Checkov report
        uses: actions/upload-artifact@v4
        with:
          name: checkov-report.json
          path: checkov-report.json
  zap:
    name: OWASP ZAP - DAST Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Start Flask App
        run: |
          pip install -r requirements.txt
          nohup python app/app.py &
          sleep 10

      - name: Running DAST Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:5000'
          fail_action: false
          artifact-name: zap-report
          token: ${{ secrets.ZAP }}

      - name: Upload Zap Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: ./report-html.html

  comment_semgrep:
    name: GH Comments Semgrep Findings
    needs: sast
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download semgrep results
        uses: actions/download-artifact@v4
        with:
          name: semgrep-results

      - name: Post OWASP Summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('semgrep.json', 'utf8'));

            if (!context.issue || !context.issue.number) {
              core.setFailed("No PR context available.");
              return;
            }
            if (!results.results || results.results.length === 0) {
              return github.rest.isses.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: "No Semgrep issues found for OWASP Top 10."});
            }
            
            let summary = " Semgrep OWASP Findings \n\n";
            for (const finding of results.results) {
              const rule = finding.check_id || "Unknown";
              const owaspTag = finding.metadata && finding.metadata.owasp ? finding.metadata.owasp.join(', ') : "Unlabeled";
              const severity = finding.extra?.severiry || "Info";
              summary += `- [${severity}] \`${rule}\` - **${owaspTag}**\n - File: \`${finding.path}:${finding.start.line}\`\n\n`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });